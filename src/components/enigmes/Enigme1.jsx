import React, { useState, useEffect, useContext } from "react"; // Importation de React, des hooks et du contexte
import { JournalContext } from "../../context/JournalContext"; // Import du contexte global du Journal
import PuzzleImage from "../PuzzleImage"; // Import du composant enfant PuzzleImage (le puzzle √† reconstituer)

export default function Enigme1({ onComplete }) {
  // --- CONTEXTE GLOBAL ---
  const { addMessage } = useContext(JournalContext); // Permet d‚Äôajouter un message dans le Journal global

  // --- √âTATS (useState) ---
  const [isPuzzleDone, setPuzzleDone] = useState(false); // Indique si le puzzle est termin√©
  const [valeur, setValeur] = useState(""); // Stocke la valeur saisie
  const [message, setMessage] = useState(""); // Message de validation
  const [journal, setJournal] = useState([]); // Journal local de l‚Äô√©nigme

  const [audio, setAudio] = useState(null); // Stocke le son du succ√®s

  // --- üîä Pr√©pare l‚Äôaudio ---
  useEffect(() => {
    const sound = new Audio("/audio/audio_enigme1/audio_puzzle_resolu.mp3");
    sound.volume = 1;
    setAudio(sound);
  }, []);

  // --- üß© Quand le puzzle est r√©solu ---
  const handlePuzzleResolved = () => {
    if (!isPuzzleDone) {
      setPuzzleDone(true);

      // Lecture audio √† la premi√®re interaction
      const playAudio = () => {
        if (audio) {
          audio.play().catch((err) =>
            console.warn("Lecture audio bloqu√©e :", err)
          );
        }
        window.removeEventListener("click", playAudio);
      };
      window.addEventListener("click", playAudio);


      // Ajoute aussi dans le journal local
      setJournal((prev) => [
        ...prev,
        'ARC : ',
        "La Tour du Temps d√©tient la Cl√© du Pouvoir. Ma cl√© bat selon un cycle que tu ne comprendras jamais.",
        "Journal : Convertis-la en minutes et brise-la avec La Clef. Notre agent de liaison a constat√© que le cycle dure 10h57.",
      ]);
    }
  };

  // --- üßÆ V√©rifie la r√©ponse du joueur ---
  const verifier = () => {
    if (parseInt(valeur) === 73) {
      addMessage("üì° Donn√©e confirm√©e. Alpha ROOT a d√©bloqu√© le premier verrou du syst√®me ARC.");
      addMessage("‚úÖ Premi√®re partie de la latitude r√©cup√©r√©e : 73¬∞ !");
      //setMessage("‚úÖ Premi√®re partie de la latitude r√©cup√©r√©e : 73¬∞ !");
      //setJournal((prev) => [
      //  ...prev,
      //  "üì° Donn√©e confirm√©e. Alpha ROOT a d√©bloqu√© le premier verrou du syst√®me ARC.",
      //]);

      // Lecture du son de r√©ussite
      if (audio) {
        audio.play().catch((err) =>
          console.warn("Lecture audio bloqu√©e :", err)
        );
      }

      // Transition vers l‚Äô√©nigme suivante
      setTimeout(() => onComplete(), 3000);
    } else {
      setMessage([
        "‚ùå Mauvaise r√©ponse, la d√©tection d‚ÄôARC augmente de 5%...",
        <br />,
        "‚ö†Ô∏è Anomalie d√©tect√©e... chaque erreur attire l‚Äôattention d‚ÄôARC !",
    ]);
    }
  };

  // --- üé® AFFICHAGE ---
  return (
    <div className="enigme-container">
      {/* Titre principal */}
      <h2>LE SCEAU DE LA SPASSKA√èA</h2>

      {/* Message introductif */}
      <p>
        {isPuzzleDone
          ? "Puzzle compl√©t√© ‚Äî observe la Tour Spasska√Øa et poursuis ta mission."
          : "Reconstitue le puzzle pour r√©v√©ler la Tour Spasska√Øa."}
      </p>

      {/* Puzzle affich√© tant qu‚Äôil n‚Äôest pas fini */}
      {!isPuzzleDone && (
        <PuzzleImage
          imageSrc="/image/image_enigme1/image_tour.png"
          onResolve={handlePuzzleResolved}
        />
      )}

      {/* Interface une fois le puzzle fini */}
      {isPuzzleDone && (
        <>
          {/* Journal local de l‚Äô√©nigme */}
          <div className="journal">
            {journal.map((line, index) => (
              <p key={index}>{line}</p>
            ))}
          </div>

          {/* Champ de saisie */}
          <p>Entre le chiffre correct :</p>
          <input
            type="number"
            value={valeur}
            onChange={(e) => setValeur(e.target.value)}
            placeholder="Entre la valeur..."
          />

          {/* Bouton de validation */}
          <button onClick={verifier}>Valider</button>

          {/* Message d‚Äô√©tat */}
          <p className="message">{message}</p>
        </>
      )}
    </div>
  );
}
