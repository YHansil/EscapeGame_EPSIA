import React, { useState, useEffect } from "react"; // Importation des fonctions et hooks n√©cessaires de React

import PuzzleImage from "../PuzzleImage"; // Import du composant enfant PuzzleImage (le puzzle √† reconstituer)


export default function Enigme1({ onComplete }) {

  // --- √âTATS (useState) ---

  // Indique si le puzzle est termin√© ou non (false au d√©part)
  const [isPuzzleDone, setPuzzleDone] = useState(false);

  // Stocke la valeur saisie par le joueur pour la r√©ponse finale (le chiffre)
  const [valeur, setValeur] = useState("");

  // Message de retour pour le joueur (succ√®s / erreur)
  const [message, setMessage] = useState("");

  // Journal de bord (liste de messages narratifs affich√©s √† l‚Äô√©cran)
  const [journal, setJournal] = useState([
    "üß© √âNIGME 1 ‚Äî LE SCEAU DE LA SPASSKA√èA",
    "(Kremlin, Moscou ‚Äì Premi√®re cl√© de la latitude)",
  ]);

  // Pr√©pare une variable d‚Äô√©tat pour stocker un objet audio (pour le son de succ√®s)
  const [audio, setAudio] = useState(null);

  // --- EFFET SECONDAIRE : useEffect ---
  // S‚Äôex√©cute une fois au montage du composant
  useEffect(() => {
    // Cr√©e un nouvel objet audio en m√©moire √† partir du fichier pr√©sent dans /public
    const sound = new Audio("/audio/audio_enigme1/audio_puzzle_resolu.mp3");
    // D√©finit le volume √† 100%
    sound.volume = 1;
    // Stocke cet objet audio dans l‚Äô√©tat local `audio`
    setAudio(sound);
  }, []); // [] = ex√©cuter une seule fois √† l‚Äôinitialisation

  // --- FONCTION : quand le puzzle est r√©solu ---
  const handlePuzzleResolved = () => {
    // V√©rifie que le puzzle n‚Äôa pas d√©j√† √©t√© marqu√© comme termin√©
    if (!isPuzzleDone) {
      // Met √† jour l‚Äô√©tat pour indiquer que le puzzle est fini
      setPuzzleDone(true);

      // Comme Chrome bloque parfois l‚Äôaudio automatique, on pr√©pare un ‚Äúd√©blocage‚Äù
      // L‚Äôaudio sera lu d√®s que l‚Äôutilisateur clique sur la page
      const playAudio = () => {
        if (audio) {
          audio.play().catch((err) =>
            console.warn("Lecture audio bloqu√©e :", err)
          );
        }
        // Une fois l‚Äôaudio jou√©, on retire le listener pour √©viter les r√©p√©titions
        window.removeEventListener("click", playAudio);
      };
      // On √©coute le premier clic utilisateur pour d√©clencher le son
      window.addEventListener("click", playAudio);

      // Ajoute de nouvelles lignes dans le journal de bord (messages narratifs)
      setJournal((prev) => [
        ...prev,
        'üéß ARC : "La Tour du Temps d√©tient la Cl√© du Pouvoir. Ma cl√© bat selon un cycle que tu ne comprendras jamais."',
        "üóíÔ∏è Journal : Convertis-la en minutes et brise-la avec La Clef. Notre agent de liaison a constat√© que le cycle dure 10h57.",
      ]);
    }
  };

  // --- FONCTION : v√©rifie la r√©ponse saisie par le joueur ---
  const verifier = () => {
    // Convertit la valeur saisie en nombre entier et v√©rifie si elle est correcte (73)
    if (parseInt(valeur) === 73) {
      // Affiche un message de succ√®s
      setMessage("‚úÖ Premi√®re partie de la latitude r√©cup√©r√©e : 73¬∞ !");
      // Ajoute des entr√©es dans le journal de bord
      setJournal((prev) => [
        ...prev,
        "üì° Donn√©e confirm√©e. Alpha ROOT a d√©bloqu√© le premier verrou du syst√®me ARC.",
      ]);

      // Lecture du son de r√©ussite si disponible
      if (audio) {
        audio.play().catch((err) =>
          console.warn("Lecture audio bloqu√©e :", err)
        );
      }

      // Apr√®s un court d√©lai (3 secondes), on passe automatiquement √† l‚Äô√©nigme suivante
      setTimeout(() => onComplete(), 1000);
    } else {
      // Si la valeur est incorrecte, affiche un message d‚Äôerreur
      setMessage("‚ùå Mauvaise r√©ponse, la d√©tection d‚ÄôARC augmente de 5%...");
      // Ajoute un avertissement dans le journal
      setJournal((prev) => [
        ...prev,
        "‚ö†Ô∏è Anomalie d√©tect√©e... chaque erreur attire l‚Äôattention d‚ÄôARC !",
      ]);
    }
  };

  // --- RENDU JSX (affichage √† l‚Äô√©cran) ---
  return (
    <div className="enigme-container">
      {/* Titre principal de l‚Äô√©nigme */}
      <h2>üß© √âNIGME 1 ‚Äî LE SCEAU DE LA SPASSKA√èA</h2>

      {/* Texte d‚Äôintroduction, change selon que le puzzle est fini ou non */}
      <p>
        {isPuzzleDone
          ? "Puzzle compl√©t√© ‚Äî observe la Tour Spasska√Øa et poursuis ta mission."
          : "Reconstitue le puzzle pour r√©v√©ler la Tour Spasska√Øa."}
      </p>

      {/* ‚úÖ Affiche le puzzle uniquement tant qu‚Äôil n‚Äôest pas termin√© */}
      {!isPuzzleDone && (
        <PuzzleImage
          imageSrc="/image/image_enigme1/image_tour.png" // chemin vers l‚Äôimage
          onResolve={handlePuzzleResolved} // fonction √† appeler quand le puzzle est fini
        />
      )}

      {/* ‚úÖ Si le puzzle est termin√©, on affiche le reste de l‚Äôinterface */}
      {isPuzzleDone && (
        <>
          {/* Journal de bord : affichage dynamique de chaque ligne */}
          <div className="journal">
            {journal.map((line, index) => (
              <p key={index}>{line}</p> // chaque entr√©e du journal est affich√©e s√©par√©ment
            ))}
          </div>

          {/* Champ de saisie de la r√©ponse */}
          <p>Entre le chiffre correct :</p>
          <input
            type="number" // champ num√©rique
            value={valeur} // li√© √† la variable d‚Äô√©tat
            onChange={(e) => setValeur(e.target.value)} // met √† jour la valeur √† chaque frappe
            placeholder="Entre la valeur..." // texte d‚Äôaide
          />

          {/* Bouton pour valider la r√©ponse */}
          <button onClick={verifier}>Valider</button>

          {/* Message de r√©sultat (succ√®s ou erreur) */}
          <p className="message">{message}</p>
        </>
      )}
    </div>
  );
}
