// src/components/JournalDeBord.jsx
import React, { useContext, useEffect, useRef, useState } from "react";
import { JournalContext } from "../context/JournalContext";

export default function JournalDeBord() {
  const { messages } = useContext(JournalContext);
  const containerRef = useRef(null);

  // âœ… Par dÃ©faut : le journal dÃ©marre repliÃ©
  const [isMinimized, setIsMinimized] = useState(true);

  // âœ… Fait dÃ©filer automatiquement vers le bas quand un message arrive (si ouvert)
  useEffect(() => {
    if (containerRef.current && !isMinimized) {
      containerRef.current.scrollTop = containerRef.current.scrollHeight;
    }
  }, [messages, isMinimized]);

  // âœ… Permet dâ€™ouvrir/fermer manuellement
  const toggleMinimize = () => setIsMinimized((prev) => !prev);

  // âœ… Ã‰coute un Ã©vÃ©nement global envoyÃ© quand on change dâ€™Ã©nigme
  useEffect(() => {
    const handleFoldEvent = () => setIsMinimized(true); // referme Ã  chaque changement dâ€™Ã©nigme
    window.addEventListener("foldJournal", handleFoldEvent);
    return () => window.removeEventListener("foldJournal", handleFoldEvent);
  }, []);

  return (
    <div className={`journal-bord ${isMinimized ? "reduit" : ""}`}>
      {/* En-tÃªte avec bouton pour ouvrir/fermer */}
      <div className="journal-header" onClick={toggleMinimize}>
        ğŸ“– Journal de bord
        <button className="toggle-btn">
          {isMinimized ? "â–²" : "â–¼"}
        </button>
      </div>

      {/* Contenu affichÃ© uniquement si non repliÃ© */}
      {!isMinimized && (
        <div className="journal-content" ref={containerRef}>
          {messages.map((msg, index) => (
            <div key={index} className="journal-message">
              {msg}
            </div>
          ))}
        </div>
      )}
    </div>
  );
}
